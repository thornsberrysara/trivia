{"version":3,"sources":["components/Questions.js","components/Container.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["questions","question","answers","correct","id","n","Promise","resolve","sort","Math","random","slice","Container","options","selected","useState","answer","setAnswer","className","map","text","index","key","onClick","Result","score","playAgain","App","state","responses","getQuestions","Questions","then","setState","checkAnswer","correctAnswer","this","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3dc3657e.chunk.js","sourcesContent":["const questions = [\n  {\n    question: `What is \"Blah Blah's\" real name?`,\n    answers: [\"Jennifer\", \"Carol\", \"Alyssa\", \"Lily\"],\n    correct: \"Carol\",\n    id: \"1\"\n  },\n  {\n    question: \"Where did Ted and Lily meet?\",\n    answers: [\n      \"MacLaren's\",\n      \"Robin's Apartment\",\n      \"Schlegel's Bagels\",\n      \"Wesleyan University\"\n    ],\n    correct: \"Wesleyan University\",\n    id: \"2\"\n  },\n  {\n    question: \"Which movie did Marshall and Lily watch every Valentine's Day?\",\n    answers: [\"Predator\", \"Dirty Dancing\", \"The Princess Bride\", \"Groundhog Day\"],\n    correct: \"Predator\",\n    id: \"3\"\n  },\n  {\n    question: \"Which college did Stella attend?\",\n    answers: [\"Wesleyan\", \"Harvard\", \"Stanford\", \"New York University\"],\n    correct: \"Stanford\",\n    id: \"4\"\n  },\n  {\n    question: \"Which doppelganger was spotted at Robots vs. Wrestlers?\",\n    answers: [\"Marshall\", \"Robin\", \"Barney\", \"Ted\"],\n    correct: \"Ted\",\n    id: \"5\"\n  },\n  {\n    question: \"Which breed of dog did Ted have as a child?\",\n    answers: [\"Golden Retriever\", \"Bull Terrier\", \"Shih Tzu\", \"Black Lab\"],\n    correct: \"Golden Retriever\",\n    id: \"6\"\n  },\n  {\n    question: \"What was Robin Sparkle's first hit song?\",\n    answers: [\"Sand Castles in the Sand\", \"P.S. I Love You\", \"Let's Go to the Mall\", \"Murder Train\"],\n    correct: \"Let's Go to the Mall\",\n    id: \"7\"\n  },\n  {\n    question: \"Which alcoholic beverage fixed the relationship between Marshall and Barney?\",\n    answers: [\"Tequila\", \"Beer\", \"Strawberry Daiquiri\", \"Red Wine\"],\n    correct: \"Beer\",\n    id: \"8\"\n  },\n  {\n    question: `How often does \"The Naked Man\" work?`,\n    answers: [\"1/4 times\", \"2/5 times\", \"1/3 times\", \"2/3 times\"],\n    correct: \"2/3 times\",\n    id: \"9\"\n  },\n  {\n    question: \"What determined a happy couple?\",\n    answers: [\"The Olive Theory\", \"Daily Brunch\", \"Living together\", \"Sharing a booth\"],\n    correct: \"The Olive Theory\",\n    id: \"10\"\n  }\n];\n\nexport default (n = 10) =>\n  Promise.resolve(questions.sort(() => 0.5 - Math.random()).slice(0, n));\n","import React, {useState} from \"react\";\n\nconst Container = ({question, options, selected}) => {\n  const [answer, setAnswer] = useState(options);\n  return (\n    <div className=\"container\">\n      <div className=\"question\">{question}</div>\n      {answer.map((text, index) => (\n        <div className=\"answers\">\n        <button\n          key={index}\n          className=\"answerBtn\"\n          onClick={() => {\n            setAnswer([text]);\n            selected(text);\n          }}\n        >\n          {text}\n        </button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Container;\n","import React from \"react\";\n\nconst Result = ({ score, playAgain }) => (\n  <div className=\"score-board\">\n    <div className=\"score\">Score: {score} / 10</div>\n    <div className=\"play-again\">\n    <button className=\"playBtn\" onClick={playAgain}>\n      Play again!\n    </button>\n    </div>\n  </div>\n);\n\nexport default Result;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Questions from \"./components/Questions\";\nimport Container from \"./components/Container\";\nimport Result from \"./components/Result\";\n\nclass App extends Component {\n  state = {\n    questions: [],\n    score: 0,\n    responses: 0\n  };\n\n  getQuestions = () => {\n    Questions().then(question => {\n      this.setState({\n        questions: question\n      });\n    });\n  };\n\n  checkAnswer = (answer, correctAnswer) => {\n    if (answer === correctAnswer) {\n      this.setState({\n        score: this.state.score + 1\n      });\n    }\n    this.setState({\n      responses: this.state.responses < 10 ? this.state.responses + 1 : 10\n    });\n  };\n\n  playAgain = () => {\n    this.getQuestions();\n    this.setState({\n      score: 0,\n      responses: 0\n    });\n  };\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>How I Met Your Mother Trivia</h1>\n        {this.state.questions.length > 0 &&\n          this.state.responses < 10 &&\n          this.state.questions.map(({ question, answers, correct, id }) => (\n            <Container\n              question={question}\n              options={answers}\n              key={id}\n              selected={answer => this.checkAnswer(answer, correct)}\n            />\n          ))}\n        {this.state.responses === 10 ? (\n          <Result score={this.state.score} playAgain={this.playAgain} />\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}